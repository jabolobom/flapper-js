{"version":3,"file":"index-Djuh4Fk_.js","sources":["../../src/main.js"],"sourcesContent":["import kaplay from \"kaplay\";\r\n\r\nconst k = kaplay({\r\n    width: 1000,\r\n    height: 600,\r\n    canvas: document.getElementById(\"canvas\"), \r\n});\r\n\r\nk.setLayers([\"bg\", \"obj\", \"ui\"], \"obj\")\r\n\r\n\r\n// maybe define middleX and middleY for all scenes, insted of inside every single one\r\n\r\nconst mainfont = k.loadFont(\"VCR\", \"fonts/VCR_OSD_MONO_1.001.ttf\");\r\nk.loadSound(\"jump1\", \"sounds/JUMP1-F.wav\"); // TODO find a way to use both randomly, dont want to use it if elses\r\nk.loadSound(\"jump2\", \"sounds/JUMP2-G.wav\"); // but it may be inevitable\r\nk.loadSound(\"hit\", \"sounds/HIT-F#.wav\"); // not working atm, the other scene overwrites it, maybe a \"game over\"\r\n// theme to play after hitting something\r\nk.loadSprite(\"player\", \"sprites/winged_dude_sheet.png\", {\r\n    sliceX: 2, \r\n    sliceY: 0,\r\n    anims: {flap: {from: 0, to: 1, loop: true}}\r\n});\r\nk.loadSprite(\"building\", \"sprites/building.png\")\r\nk.loadSprite(\"bg\", \"sprites/background.png\")\r\n\r\nk.scene(\"game_over\", ({ score }) => {\r\n\r\n        // background\r\n        k.add([\r\n            k.sprite(\"bg\"),\r\n            k.layer(\"bg\"),\r\n        ])\r\n\r\n        const middleX = k.width() / 2;\r\n        const middleY = k.height() / 2;\r\n\r\n        k.add([\r\n        k.text(`Game Over`, { size: 64, font: mainfont,}),\r\n        k.color(255,0,0),\r\n        pos(middleX, middleY-64),\r\n        k.anchor(\"center\"), // that is useful\r\n        k.layer(\"ui\"), \r\n        ])\r\n\r\n        k.add([\r\n        k.text(`Final Score: ${score}`, { size: 32, font: mainfont,}),\r\n        pos(middleX, middleY),\r\n        k.anchor(\"center\"), // that is useful\r\n        k.layer(\"ui\"), \r\n        ])\r\n\r\n        k.add([\r\n        k.text(`Press SPACE to start again.`, { size: 32, font: mainfont,}),\r\n        pos(middleX, middleY+64),\r\n        k.anchor(\"center\"), // that is useful\r\n        k.layer(\"ui\"), \r\n        ])\r\n\r\n        k.onKeyPress([\"space\", \"z\"], () =>{\r\n            k.go(\"main\")\r\n        })\r\n})\r\n\r\nk.scene(\"main\", () => {\r\n\r\n    // background\r\n    k.add([\r\n        k.sprite(\"bg\"),\r\n        k.layer(\"bg\"),\r\n    ])\r\n    \r\n    // config\r\n    let vertical_speed = 0;\r\n    const gravity = 1200;\r\n    const middleX = k.width() / 2;\r\n    const middleY = k.height() / 2;\r\n    let paused = false;\r\n    let started = false;\r\n    let restart = false; // TODO\r\n    let score = 0;\r\n\r\n    const pipeGap = 140;\r\n\r\n    // player and pipes\r\n    const bird = k.add([\r\n        k.sprite(\"player\", {frame: 1}),\r\n        k.pos(middleX, middleY),\r\n        k.area(),\r\n        k.layer(\"obj\"),\r\n        \"player\",\r\n    ]);\r\n         \r\n    // jumping\r\n    k.onKeyPress([\"space\", \"z\"], () => { \r\n        started = true;\r\n        k.play(\"jump1\")\r\n        vertical_speed = -450;\r\n        bird.play(\"flap\")\r\n    })\r\n\r\n    const scoreCounter = k.add([\r\n        k.text(`Score: ${score}`, { size: 32, font: mainfont,}),\r\n        pos(middleX, 64),\r\n        k.anchor(\"center\"), // that is useful\r\n        k.layer(\"ui\"),\r\n    ])\r\n\r\n\r\n    function spawnPipe(){\r\n\r\n    const gapCenter = k.rand(pipeGap, k.height() - pipeGap);\r\n    const pipeX = k.width() + 64; // offscreen\r\n\r\n    k.add([\r\n        k.sprite(\"building\", {width: 64, height: k.height() }),\r\n        k.pos(pipeX, gapCenter + pipeGap / 2),\r\n        k.area(),\r\n        \"pipe\",\r\n        { passed: false },\r\n        k.layer(\"obj\"),\r\n    ]);\r\n\r\n    k.add([\r\n        k.sprite(\"building\", {width: 64, height: k.height() }),\r\n        k.pos(pipeX, gapCenter - pipeGap / 2 - k.height()), \r\n        k.area(),\r\n        \"pipe\",\r\n        k.layer(\"obj\"),\r\n    ]); // dont actually need to return anything, there's no reference needed to each individual pipe\r\n    // refering them all together through the tag \"pipe\" works fine\r\n    };\r\n\r\n    function gameOver(lastscore){\r\n        k.go(\"game_over\", {score: lastscore})\r\n\r\n        return;\r\n    }\r\n\r\n\r\n    // game logic\r\n    k.onUpdate(() => {\r\n        \r\n        // \"gravity\"\r\n        if (!paused && started){\r\n        vertical_speed += gravity * k.dt();\r\n        bird.pos.y += vertical_speed * k.dt();\r\n        }\r\n       \r\n        // bound check\r\n        if (bird.pos.y > k.height())\r\n        {\r\n            bird.pos.y = k.height(); \r\n            vertical_speed = 0; \r\n            paused = true;\r\n            gameOver(score);\r\n        }\r\n        if (bird.pos.y < 0){ bird.pos.y = 0; vertical_speed = 0; }\r\n\r\n        // bird tilt\r\n        // something about // if (vertical speed > tilt_threshold && bird.rotation < y) {bird.rotation += x;}\r\n\r\n    })\r\n\r\n    // pipe spawning\r\n    k.loop(1.2, () => { // don't know if the original was like this, but this looks fine\r\n        if (!paused && started) { spawnPipe(); }\r\n    })\r\n    \r\n    // pipe movement\r\n    k.onUpdate(\"pipe\" , (pipe) => { // batch referencing all \"pipe\"s to move left\r\n        if (!paused && started){  \r\n            pipe.move(-220,0 * k.dt())\r\n            if (pipe.pos.x < -64){\r\n                k.destroy(pipe);\r\n            }\r\n\r\n            if (pipe.pos.x < bird.pos.x && !pipe.passed){ // this actually check for the one who actually has the flag\r\n                pipe.passed = true; // and the one who doesn't (who will also return false lol)\r\n                score += 0.5; // i mean, i could fix this, but this also works so...\r\n                scoreCounter.text = `Score: ${score}`;\r\n            }}\r\n    })\r\n\r\n    // collisions\r\n    k.onCollide(\"player\", \"pipe\", () =>{\r\n        paused = true;\r\n        gameOver(score); // TODO: figure it out how to reset the scene\r\n    })\r\n    \r\n});\r\n\r\nk.scene(\"start_menu\", () =>{\r\n\r\n    // background\r\n    k.add([\r\n            k.sprite(\"bg\"),\r\n            k.layer(\"bg\"),\r\n    ])\r\n\r\n    const middleX = k.width() / 2;\r\n    const middleY = k.height() / 2;\r\n\r\n    k.add([\r\n        k.text(`Press SPACE to start!`, {size: 64, font: mainfont,}),\r\n        pos(middleX,middleY),\r\n        anchor(\"center\"),\r\n        k.layer(\"ui\"),\r\n    ])\r\n\r\n    k.onKeyPress([\"space\"], () => {\r\n        k.go(\"main\")\r\n    })\r\n})\r\n\r\nk.go(\"start_menu\");"],"names":["k","kaplay","mainfont","score","middleX","middleY","vertical_speed","gravity","paused","started","pipeGap","bird","scoreCounter","spawnPipe","gapCenter","pipeX","gameOver","lastscore","pipe"],"mappings":"+uBAEA,MAAMA,EAAIC,EAAO,CACb,MAAO,IACP,OAAQ,IACR,OAAQ,SAAS,eAAe,QAAQ,CAC5C,CAAC,EAEDD,EAAE,UAAU,CAAC,KAAM,MAAO,IAAI,EAAG,KAAK,EAKtC,MAAME,EAAWF,EAAE,SAAS,MAAO,8BAA8B,EACjEA,EAAE,UAAU,QAAS,oBAAoB,EACzCA,EAAE,UAAU,QAAS,oBAAoB,EACzCA,EAAE,UAAU,MAAO,mBAAmB,EAEtCA,EAAE,WAAW,SAAU,gCAAiC,CACpD,OAAQ,EACR,OAAQ,EACR,MAAO,CAAC,KAAM,CAAC,KAAM,EAAG,GAAI,EAAG,KAAM,EAAI,CAAC,CAC9C,CAAC,EACDA,EAAE,WAAW,WAAY,sBAAsB,EAC/CA,EAAE,WAAW,KAAM,wBAAwB,EAE3CA,EAAE,MAAM,YAAa,CAAC,CAAE,MAAAG,CAAK,IAAO,CAG5BH,EAAE,IAAI,CACFA,EAAE,OAAO,IAAI,EACbA,EAAE,MAAM,IAAI,CACxB,CAAS,EAED,MAAMI,EAAUJ,EAAE,MAAK,EAAK,EACtBK,EAAUL,EAAE,OAAM,EAAK,EAE7BA,EAAE,IAAI,CACNA,EAAE,KAAK,YAAa,CAAE,KAAM,GAAI,KAAME,EAAU,EAChDF,EAAE,MAAM,IAAI,EAAE,CAAC,EACf,IAAII,EAASC,EAAQ,EAAE,EACvBL,EAAE,OAAO,QAAQ,EACjBA,EAAE,MAAM,IAAI,CACpB,CAAS,EAEDA,EAAE,IAAI,CACNA,EAAE,KAAK,gBAAgBG,CAAK,GAAI,CAAE,KAAM,GAAI,KAAMD,EAAU,EAC5D,IAAIE,EAASC,CAAO,EACpBL,EAAE,OAAO,QAAQ,EACjBA,EAAE,MAAM,IAAI,CACpB,CAAS,EAEDA,EAAE,IAAI,CACNA,EAAE,KAAK,8BAA+B,CAAE,KAAM,GAAI,KAAME,EAAU,EAClE,IAAIE,EAASC,EAAQ,EAAE,EACvBL,EAAE,OAAO,QAAQ,EACjBA,EAAE,MAAM,IAAI,CACpB,CAAS,EAEDA,EAAE,WAAW,CAAC,QAAS,GAAG,EAAG,IAAK,CAC9BA,EAAE,GAAG,MAAM,CACf,CAAC,CACT,CAAC,EAEDA,EAAE,MAAM,OAAQ,IAAM,CAGlBA,EAAE,IAAI,CACFA,EAAE,OAAO,IAAI,EACbA,EAAE,MAAM,IAAI,CACpB,CAAK,EAGD,IAAIM,EAAiB,EACrB,MAAMC,EAAU,KACVH,EAAUJ,EAAE,MAAK,EAAK,EACtBK,EAAUL,EAAE,OAAM,EAAK,EAC7B,IAAIQ,EAAS,GACTC,EAAU,GAEVN,EAAQ,EAEZ,MAAMO,EAAU,IAGVC,EAAOX,EAAE,IAAI,CACfA,EAAE,OAAO,SAAU,CAAC,MAAO,CAAC,CAAC,EAC7BA,EAAE,IAAII,EAASC,CAAO,EACtBL,EAAE,KAAI,EACNA,EAAE,MAAM,KAAK,EACb,QACR,CAAK,EAGDA,EAAE,WAAW,CAAC,QAAS,GAAG,EAAG,IAAM,CAC/BS,EAAU,GACVT,EAAE,KAAK,OAAO,EACdM,EAAiB,KACjBK,EAAK,KAAK,MAAM,CACpB,CAAC,EAED,MAAMC,EAAeZ,EAAE,IAAI,CACvBA,EAAE,KAAK,UAAUG,CAAK,GAAI,CAAE,KAAM,GAAI,KAAMD,EAAU,EACtD,IAAIE,EAAS,EAAE,EACfJ,EAAE,OAAO,QAAQ,EACjBA,EAAE,MAAM,IAAI,CACpB,CAAK,EAGD,SAASa,GAAW,CAEpB,MAAMC,EAAYd,EAAE,KAAKU,EAASV,EAAE,OAAM,EAAKU,CAAO,EAChDK,EAAQf,EAAE,MAAK,EAAK,GAE1BA,EAAE,IAAI,CACFA,EAAE,OAAO,WAAY,CAAC,MAAO,GAAI,OAAQA,EAAE,OAAM,EAAI,EACrDA,EAAE,IAAIe,EAAOD,EAAYJ,EAAU,CAAC,EACpCV,EAAE,KAAI,EACN,OACA,CAAE,OAAQ,EAAK,EACfA,EAAE,MAAM,KAAK,CACrB,CAAK,EAEDA,EAAE,IAAI,CACFA,EAAE,OAAO,WAAY,CAAC,MAAO,GAAI,OAAQA,EAAE,OAAM,EAAI,EACrDA,EAAE,IAAIe,EAAOD,EAAYJ,EAAU,EAAIV,EAAE,QAAQ,EACjDA,EAAE,KAAI,EACN,OACAA,EAAE,MAAM,KAAK,CACrB,CAAK,CAED,CAEA,SAASgB,EAASC,EAAU,CACxBjB,EAAE,GAAG,YAAa,CAAC,MAAOiB,CAAS,CAAC,CAGxC,CAIAjB,EAAE,SAAS,IAAM,CAGT,CAACQ,GAAUC,IACfH,GAAkBC,EAAUP,EAAE,KAC9BW,EAAK,IAAI,GAAKL,EAAiBN,EAAE,GAAE,GAI/BW,EAAK,IAAI,EAAIX,EAAE,OAAM,IAErBW,EAAK,IAAI,EAAIX,EAAE,OAAM,EACrBM,EAAiB,EACjBE,EAAS,GACTQ,EAASb,CAAK,GAEdQ,EAAK,IAAI,EAAI,IAAIA,EAAK,IAAI,EAAI,EAAGL,EAAiB,EAK1D,CAAC,EAGDN,EAAE,KAAK,IAAK,IAAM,CACV,CAACQ,GAAUC,GAAWI,EAAS,CACvC,CAAC,EAGDb,EAAE,SAAS,OAAUkB,GAAS,CACtB,CAACV,GAAUC,IACXS,EAAK,KAAK,KAAK,EAAIlB,EAAE,GAAE,CAAE,EACrBkB,EAAK,IAAI,EAAI,KACblB,EAAE,QAAQkB,CAAI,EAGdA,EAAK,IAAI,EAAIP,EAAK,IAAI,GAAK,CAACO,EAAK,SACjCA,EAAK,OAAS,GACdf,GAAS,GACTS,EAAa,KAAO,UAAUT,CAAK,IAE/C,CAAC,EAGDH,EAAE,UAAU,SAAU,OAAQ,IAAK,CAC/BQ,EAAS,GACTQ,EAASb,CAAK,CAClB,CAAC,CAEL,CAAC,EAEDH,EAAE,MAAM,aAAc,IAAK,CAGvBA,EAAE,IAAI,CACEA,EAAE,OAAO,IAAI,EACbA,EAAE,MAAM,IAAI,CACxB,CAAK,EAED,MAAMI,EAAUJ,EAAE,MAAK,EAAK,EACtBK,EAAUL,EAAE,OAAM,EAAK,EAE7BA,EAAE,IAAI,CACFA,EAAE,KAAK,wBAAyB,CAAC,KAAM,GAAI,KAAME,EAAU,EAC3D,IAAIE,EAAQC,CAAO,EACnB,OAAO,QAAQ,EACfL,EAAE,MAAM,IAAI,CACpB,CAAK,EAEDA,EAAE,WAAW,CAAC,OAAO,EAAG,IAAM,CAC1BA,EAAE,GAAG,MAAM,CACf,CAAC,CACL,CAAC,EAEDA,EAAE,GAAG,YAAY"}